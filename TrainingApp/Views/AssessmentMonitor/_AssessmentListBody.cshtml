<!--
/// <summary>
/// Module purpose: View for Assessment Monitor page that displays a list of assessment records that are already assigned to trainees
/// Authors: Hansol Lee / Jei Yang
/// Date: Oct 26, 2022
/// Source: Created for the COMP7022 project
/// Revision History:
///
/// </summary>
-->
@model AssessmentViewModel
@using System.Reflection
@using System.ComponentModel
@using System.ComponentModel.DataAnnotations
@using TrainingApp.Models.Enums

@{
    var claims = ((System.Security.Claims.ClaimsIdentity)User.Identity).Claims;
    var claim = claims.SingleOrDefault(m => m.Type == "UserRoles");
    string userroles = claim.Value;

    List<string> roles = userroles.Split(',').ToList();
}
@foreach (var assessment in Model.Assessments)
{

    /*
    var trainee = Model.Users.Where(u => u.ID == assessment.TraineeID).FirstOrDefault();
    string traineeName = (trainee != null) ? trainee.FirstName + " " + trainee.LastName : string.Empty;

    var examiner = Model.Users.Where(u => u.ID == assessment.ExaminerID).FirstOrDefault();
    string examinerName = (examiner != null) ? examiner.FirstName + " " + examiner.LastName : string.Empty;

    var template = Model.Templates.Where(t => t.ID == assessment.TemplateID).FirstOrDefault();
    var gradingSchemaName = "";

    if (template != null)
    {
        gradingSchemaName =
            template.GradingSchema.GetType().GetMember(template.GradingSchema.ToString()).First().GetCustomAttribute<DisplayAttribute>().Name;
    }
    */
    <tr>
        <td>@assessment.Name</td>
        <td>@assessment.CreatedTime.ToString("MM.dd.yyyy")</td>
        <td>@assessment.Trainee.FirstName @assessment.Trainee.LastName</td>
        <td>@assessment.Examiner.FirstName @assessment.Examiner.LastName </td>
        <td>@Html.DisplayFor(model => assessment.Template.GradingSchema)</td>
        <td>  
            @{
                switch (@assessment.OverallGrade) {
                    case "Pass":
                        <button id="resultBtn" class="btn btn-sm btn-info result-btn" type="button">PASS</button>
                        break;
                    case "PartialPass":
                        <button id="resultBtn" class="btn btn-sm btn-warning result-btn" type="button">PARTIAL PASS</button>
                        break;
                    case "Fail":
                        <button id="resultBtn" class="btn btn-sm btn-danger result-btn" type="button">FAIL</button>
                        break;
                    default:
                        <button id="resultBtn" class="btn btn-sm btn-light result-btn" type="button">NOT SET</button>
                        break;
                }
            }
        </td>
        <td class="option-td">
            <button id="viewAssessmentBtn" class="btn text-primary" type="button"
                    onclick="location.href='@Url.Action("EvaluationView","AssessmentMonitor", new { id = assessment.ID }, null)'">
                <i class="fas fa-search"></i>
            </button>
            @if (roles.Contains("Admin"))
            {
                <button id="editAssessmentBtn" class="btn text-warning" type="button" onclick="getAssessmentInfo('@assessment.ID')">
                    <i class="fas fa-pencil-alt"></i>
                </button>

                @if (@assessment.State == 4) //Closed state
                {
                    <button id="deleteAssessmentBtn" class="btn text-danger" type="button" onclick="confirmDeleteAssessment('@assessment.ID')" data-bs-toggle="modal" data-bs-target="#deleteModal">
                        <i class="far fa-trash-alt"></i>
                    </button>
                }
            }
        </td>
    </tr>

}